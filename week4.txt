import tkinter as tk
from tkinter import # Task class for the to-do list
class Task:
    def __init__(self, description, priority):
        self.description = description
        self.priority = priority

    def __repr__(self):
        return f'{self.description} (Priority: {self.# Main application
class App:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List and Recommendation System")

        self.task_list = []
        self.todo_frame = tk.LabelFrame(self.root, text="To-Do List")
        self.todo_frame.pack(padx=10, pady=10, fill="both", expand=True)

        self.task_entry = tk.Entry(self.todo_frame, width=30)
        self.task_entry.pack(pady=5)
        self.priority_entry = tk.Entry(self.todo_frame, width=10)
        self.priority_entry.pack(pady=5)

        self.add_task_btn = tk.Button(self.todo_frame, text="Add Task", command=self.add_task)
        self.add_task_btn.pack(pady=5)

        self.view_tasks_btn = tk.Button(self.todo_frame, text="View Tasks", command=self.view_tasks)
        self.view_tasks_btn.pack(pady=5)

        self.task_display = tk.Listbox(self.todo_frame, width=50, height=10)
        self.task_display.pack(pady=5)

        self.reverse_frame = tk.LabelFrame(self.root, text="Reverse a List")
        self.reverse_frame.pack(padx=10, pady=10, fill="both", expand=True)

        self.list_entry = tk.Entry(self.reverse_frame, width=50)
        self.list_entry.pack(pady=5)

        self.reverse_list_btn = tk.Button(self.reverse_frame, text="Reverse List", command=self.reverse_list)
        self.reverse_list_btn.pack(pady=5)

        self.reversed_list_display = tk.Label(self.reverse_frame, text="")
        self.reversed_list_display.pack(pady=5)

       
        self.recommend_frame = tk.LabelFrame(self.root, text="Recommendation System")
        self.recommend_frame.pack(padx=10, pady=10, fill="both", expand=True)

        self.prefs_entry = tk.Entry(self.recommend_frame, width=50)
        self.prefs_entry.pack(pady=5)

        self.recommend_btn = tk.Button(self.recommend_frame, text="Recommend", command=self.recommend_items)
        self.recommend_btn.pack(pady=5)

        self.recommend_display = tk.Label(self.recommend_frame, text="")
        self.recommend_display.pack(pady=5)

    def add_task(self):
        description = self.task_entry.get()
        priority = self.priority_entry.get()
        try:
            priority = int(priority)
            self.task_list.append(Task(description, priority))
            self.task_entry.delete(0, tk.END)
            self.priority_entry.delete(0, tk.END)
            messagebox.showinfo("Success", "Task added!")
        except ValueError:
            messagebox.showerror("Error", "Priority must be a number")

    # View tasks sorted by priority
    def view_tasks(self):
        self.task_display.delete(0, tk.END)
        sorted_tasks = sorted(self.task_list, key=lambda x: x.priority)
        for task in sorted_tasks:
            self.task_display.insert(tk.END, str(task))


    def reverse_list(self):
        input_list = self.list_entry.get().split(',')
        reversed_list = input_list[::-1]
        self.reversed_list_display.config(text=", ".join(reversed_list))


    def recommend_items(self):
        preferences = set(self.prefs_entry.get().split(','))
        available_items = [
            {'name': 'Basketball shoes', 'tags': {'sports', 'footwear'}},
            {'name': 'Smartphone', 'tags': {'technology', 'electronics'}},
            {'name': 'Laptop', 'tags': {'technology', 'computers'}},
            {'name': 'Running shoes', 'tags': {'sports', 'footwear'}}
        ]
        recommendations = []
        for item in available_items:
            similarity = len(preferences & item['tags'])
            if similarity > 0:
                recommendations.append((item['name'], similarity))

        recommendations.sort(key=lambda x: x[1], reverse=True)
        recommended_items = [item[0] for item in recommendations]
        self.recommend_display.config(text=", ".join(recommended_items))



if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
